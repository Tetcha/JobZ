generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String
  password String
  role     Role    @default(USER)
  balance  Int     @default(0)
  posts    Post[] @relation("UserToPost")
  profile  Profile? @relation("ProfileToUser") 
  applied  Applied[] @relation("AppliedToUser")
  userSubscription UserSubscription? @relation("UserToUserSubscription")
}

model UserSubscription  {
  id        String   @id @default(uuid())
  user      User     @relation("UserToUserSubscription",fields: [userId], references: [id])
  userId    String @unique

  startDate Int     @default(0)
  endDate  Int    @default(0)

  name String
  userRole Role     @default(USER)
  price     Int     @default(0)
  bookings  Int    @default(0)
  posts     Int   @default(0)
  view Int @default(0)
}

model Subscription {
  id        String   @id @default(uuid())

  name String
  view Int @default(0)
  userRole Role     @default(USER)
  price     Int     @default(0)
  bookings  Int    @default(0)
  posts     Int   @default(0)
}

enum Role {
  BUSINESS
  USER
}

model Profile {
  id        String   @id @default(uuid())
  title     String  @default("")
  avatar    String  @default("")
  intro     String  @default("")
  skills   String[] @default([])
  cv        String  @default("")

  user      User     @relation("ProfileToUser",fields: [userId], references: [id])
  userId    String @unique
}

model Post {
  id        String   @id @default(uuid())
  images    String[] @default([])
  name      String
  otherJobs String[] @default([])
  hireJob   String
  updateAt  String 
  descriptions String
  thumbnail String @default("")
  jobDetail JobDetail? @relation("JobDetailToPost")
  requires  Require[]   @relation("RequireToPost")
  ratings   Rating[]    @relation("RatingToPost") 
  user  User  @relation("UserToPost",fields: [userId], references: [id])
  userId String
  applied  Applied[]   @relation("AppliedToPost")
}

model JobDetail {
  id        String   @id @default(uuid())
  title     String
  quantity  String  @default("")
  type      String
  applied   Int     @default(0)
  address   String
  department String
  length    String
  salary    String
  expired   String
  status    String
  postId    String @unique
  post      Post     @relation("JobDetailToPost",fields: [postId], references: [id])
}

model Require {
  id String @id @default(uuid())
  name String
  details String
  post Post @relation("RequireToPost",fields: [postId], references: [id])
  postId String
}

model Rating {
  id String @id @default(uuid())
  post Post @relation("RatingToPost",fields: [postId], references: [id])
  postId String
  rating Int
  comment String
  avatar String
  name String
}

model Applied {
  id String @id @default(uuid())
  post Post @relation("AppliedToPost",fields: [postId], references: [id])
  postId String
  user User @relation("AppliedToUser",fields: [userId], references: [id])
  userId String

  status Status @default(INCOMING)
  stage Int @default(0)
  phone String @default("")
  note String @default("")

  booking Booking? @relation("AppliedToBooking")
}

model Booking {
  id String @id @default(uuid())
  time Int 
  linkMeeting String
  note String @default("")
  applied Applied @relation("AppliedToBooking",fields: [appliedId], references: [id])
  appliedId String   @unique

}

enum Status {
  INCOMING
  REJECT
  COMPLETE
}
